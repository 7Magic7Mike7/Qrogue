# Generated from D:/Workspaces/pycharm-workspace/Qrogue/qrogue/management/save_grammar\SaveData.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,403,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,
        14,210,8,14,1,15,4,15,213,8,15,11,15,12,15,214,1,16,1,16,3,16,219,
        8,16,1,17,1,17,5,17,223,8,17,10,17,12,17,226,9,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,246,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,30,1,30,1,30,4,30,300,8,30,11,30,12,30,301,1,31,3,31,
        305,8,31,1,31,1,31,4,31,309,8,31,11,31,12,31,310,1,32,5,32,314,8,
        32,10,32,12,32,317,9,32,1,32,3,32,320,8,32,1,32,1,32,1,33,1,33,1,
        34,1,34,1,35,1,35,1,36,1,36,3,36,332,8,36,1,37,1,37,5,37,336,8,37,
        10,37,12,37,339,9,37,1,37,1,37,1,38,1,38,3,38,345,8,38,1,38,1,38,
        1,39,1,39,1,39,1,39,3,39,353,8,39,1,39,3,39,356,8,39,1,40,1,40,1,
        40,4,40,361,8,40,11,40,12,40,362,1,41,4,41,366,8,41,11,41,12,41,
        367,1,41,1,41,1,42,4,42,373,8,42,11,42,12,42,374,1,42,1,42,1,43,
        1,43,1,43,1,43,5,43,383,8,43,10,43,12,43,386,9,43,1,43,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,5,44,397,8,44,10,44,12,44,400,9,44,
        1,44,1,44,2,337,384,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,1,0,6,1,0,48,57,2,0,43,43,45,45,1,0,97,122,1,0,
        65,90,3,0,9,10,13,13,32,32,2,0,10,10,13,13,426,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,
        0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,105,1,0,0,0,11,108,1,0,0,0,13,120,
        1,0,0,0,15,128,1,0,0,0,17,137,1,0,0,0,19,147,1,0,0,0,21,162,1,0,
        0,0,23,175,1,0,0,0,25,183,1,0,0,0,27,195,1,0,0,0,29,209,1,0,0,0,
        31,212,1,0,0,0,33,218,1,0,0,0,35,220,1,0,0,0,37,245,1,0,0,0,39,247,
        1,0,0,0,41,256,1,0,0,0,43,264,1,0,0,0,45,272,1,0,0,0,47,280,1,0,
        0,0,49,282,1,0,0,0,51,284,1,0,0,0,53,286,1,0,0,0,55,288,1,0,0,0,
        57,291,1,0,0,0,59,294,1,0,0,0,61,296,1,0,0,0,63,304,1,0,0,0,65,319,
        1,0,0,0,67,323,1,0,0,0,69,325,1,0,0,0,71,327,1,0,0,0,73,331,1,0,
        0,0,75,333,1,0,0,0,77,344,1,0,0,0,79,355,1,0,0,0,81,357,1,0,0,0,
        83,365,1,0,0,0,85,372,1,0,0,0,87,378,1,0,0,0,89,392,1,0,0,0,91,92,
        5,64,0,0,92,2,1,0,0,0,93,94,5,83,0,0,94,95,5,99,0,0,95,96,5,111,
        0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,4,1,0,0,0,99,100,5,61,0,0,
        100,6,1,0,0,0,101,102,5,111,0,0,102,103,5,117,0,0,103,104,5,116,
        0,0,104,8,1,0,0,0,105,106,5,111,0,0,106,107,5,102,0,0,107,10,1,0,
        0,0,108,109,5,91,0,0,109,110,5,73,0,0,110,111,5,78,0,0,111,112,5,
        86,0,0,112,113,5,69,0,0,113,114,5,78,0,0,114,115,5,84,0,0,115,116,
        5,79,0,0,116,117,5,82,0,0,117,118,5,89,0,0,118,119,5,93,0,0,119,
        12,1,0,0,0,120,121,5,91,0,0,121,122,5,71,0,0,122,123,5,65,0,0,123,
        124,5,84,0,0,124,125,5,69,0,0,125,126,5,83,0,0,126,127,5,93,0,0,
        127,14,1,0,0,0,128,129,5,91,0,0,129,130,5,76,0,0,130,131,5,69,0,
        0,131,132,5,86,0,0,132,133,5,69,0,0,133,134,5,76,0,0,134,135,5,83,
        0,0,135,136,5,93,0,0,136,16,1,0,0,0,137,138,5,91,0,0,138,139,5,85,
        0,0,139,140,5,78,0,0,140,141,5,76,0,0,141,142,5,79,0,0,142,143,5,
        67,0,0,143,144,5,75,0,0,144,145,5,83,0,0,145,146,5,93,0,0,146,18,
        1,0,0,0,147,148,5,91,0,0,148,149,5,65,0,0,149,150,5,67,0,0,150,151,
        5,72,0,0,151,152,5,73,0,0,152,153,5,69,0,0,153,154,5,86,0,0,154,
        155,5,69,0,0,155,156,5,77,0,0,156,157,5,69,0,0,157,158,5,78,0,0,
        158,159,5,84,0,0,159,160,5,83,0,0,160,161,5,93,0,0,161,20,1,0,0,
        0,162,163,5,81,0,0,163,164,5,117,0,0,164,165,5,97,0,0,165,166,5,
        110,0,0,166,167,5,116,0,0,167,168,5,117,0,0,168,169,5,109,0,0,169,
        170,5,70,0,0,170,171,5,117,0,0,171,172,5,115,0,0,172,173,5,101,0,
        0,173,174,5,114,0,0,174,22,1,0,0,0,175,176,5,115,0,0,176,177,5,101,
        0,0,177,178,5,99,0,0,178,179,5,111,0,0,179,180,5,110,0,0,180,181,
        5,100,0,0,181,182,5,115,0,0,182,24,1,0,0,0,183,184,3,59,29,0,184,
        185,3,59,29,0,185,186,5,100,0,0,186,187,3,59,29,0,187,188,3,59,29,
        0,188,189,5,109,0,0,189,190,3,59,29,0,190,191,3,59,29,0,191,192,
        3,59,29,0,192,193,3,59,29,0,193,194,5,121,0,0,194,26,1,0,0,0,195,
        196,3,59,29,0,196,197,3,59,29,0,197,198,5,58,0,0,198,199,3,59,29,
        0,199,200,3,59,29,0,200,201,5,58,0,0,201,202,3,59,29,0,202,203,3,
        59,29,0,203,28,1,0,0,0,204,210,3,59,29,0,205,206,3,59,29,0,206,207,
        3,59,29,0,207,210,1,0,0,0,208,210,3,61,30,0,209,204,1,0,0,0,209,
        205,1,0,0,0,209,208,1,0,0,0,210,30,1,0,0,0,211,213,3,73,36,0,212,
        211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
        32,1,0,0,0,216,219,3,73,36,0,217,219,3,59,29,0,218,216,1,0,0,0,218,
        217,1,0,0,0,219,34,1,0,0,0,220,224,3,73,36,0,221,223,3,33,16,0,222,
        221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,
        36,1,0,0,0,226,224,1,0,0,0,227,228,5,78,0,0,228,229,5,111,0,0,229,
        230,5,114,0,0,230,231,5,116,0,0,231,246,5,104,0,0,232,233,5,69,0,
        0,233,234,5,97,0,0,234,235,5,115,0,0,235,246,5,116,0,0,236,237,5,
        83,0,0,237,238,5,111,0,0,238,239,5,117,0,0,239,240,5,116,0,0,240,
        246,5,104,0,0,241,242,5,87,0,0,242,243,5,101,0,0,243,244,5,115,0,
        0,244,246,5,116,0,0,245,227,1,0,0,0,245,232,1,0,0,0,245,236,1,0,
        0,0,245,241,1,0,0,0,246,38,1,0,0,0,247,248,5,116,0,0,248,249,5,117,
        0,0,249,250,5,116,0,0,250,251,5,111,0,0,251,252,5,114,0,0,252,253,
        5,105,0,0,253,254,5,97,0,0,254,255,5,108,0,0,255,40,1,0,0,0,256,
        257,5,116,0,0,257,258,5,114,0,0,258,259,5,105,0,0,259,260,5,103,
        0,0,260,261,5,103,0,0,261,262,5,101,0,0,262,263,5,114,0,0,263,42,
        1,0,0,0,264,265,5,81,0,0,265,266,5,114,0,0,266,267,5,111,0,0,267,
        268,5,103,0,0,268,269,5,117,0,0,269,270,5,101,0,0,270,271,5,60,0,
        0,271,44,1,0,0,0,272,273,5,62,0,0,273,274,5,81,0,0,274,275,5,114,
        0,0,275,276,5,111,0,0,276,277,5,103,0,0,277,278,5,117,0,0,278,279,
        5,101,0,0,279,46,1,0,0,0,280,281,5,126,0,0,281,48,1,0,0,0,282,283,
        5,124,0,0,283,50,1,0,0,0,284,285,5,44,0,0,285,52,1,0,0,0,286,287,
        5,35,0,0,287,54,1,0,0,0,288,289,5,46,0,0,289,290,5,46,0,0,290,56,
        1,0,0,0,291,292,5,95,0,0,292,293,5,95,0,0,293,58,1,0,0,0,294,295,
        7,0,0,0,295,60,1,0,0,0,296,297,3,59,29,0,297,299,3,59,29,0,298,300,
        3,59,29,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,62,1,0,0,0,303,305,3,59,29,0,304,303,1,0,0,0,304,305,
        1,0,0,0,305,306,1,0,0,0,306,308,5,46,0,0,307,309,3,59,29,0,308,307,
        1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,64,1,
        0,0,0,312,314,3,59,29,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,
        1,0,0,0,315,316,1,0,0,0,316,320,1,0,0,0,317,315,1,0,0,0,318,320,
        3,63,31,0,319,315,1,0,0,0,319,318,1,0,0,0,320,321,1,0,0,0,321,322,
        5,106,0,0,322,66,1,0,0,0,323,324,7,1,0,0,324,68,1,0,0,0,325,326,
        7,2,0,0,326,70,1,0,0,0,327,328,7,3,0,0,328,72,1,0,0,0,329,332,3,
        69,34,0,330,332,3,71,35,0,331,329,1,0,0,0,331,330,1,0,0,0,332,74,
        1,0,0,0,333,337,5,34,0,0,334,336,9,0,0,0,335,334,1,0,0,0,336,339,
        1,0,0,0,337,338,1,0,0,0,337,335,1,0,0,0,338,340,1,0,0,0,339,337,
        1,0,0,0,340,341,5,34,0,0,341,76,1,0,0,0,342,345,5,95,0,0,343,345,
        3,73,36,0,344,342,1,0,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,347,
        3,73,36,0,347,78,1,0,0,0,348,349,5,61,0,0,349,356,5,61,0,0,350,353,
        5,95,0,0,351,353,3,59,29,0,352,350,1,0,0,0,352,351,1,0,0,0,353,354,
        1,0,0,0,354,356,3,59,29,0,355,348,1,0,0,0,355,352,1,0,0,0,356,80,
        1,0,0,0,357,360,5,42,0,0,358,361,3,73,36,0,359,361,3,59,29,0,360,
        358,1,0,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,82,1,0,0,0,364,366,7,4,0,0,365,364,1,0,0,0,366,367,
        1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,
        6,41,0,0,370,84,1,0,0,0,371,373,5,59,0,0,372,371,1,0,0,0,373,374,
        1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,377,
        6,42,0,0,377,86,1,0,0,0,378,379,5,47,0,0,379,380,5,42,0,0,380,384,
        1,0,0,0,381,383,9,0,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,385,
        1,0,0,0,384,382,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,388,
        5,42,0,0,388,389,5,47,0,0,389,390,1,0,0,0,390,391,6,43,0,0,391,88,
        1,0,0,0,392,393,5,47,0,0,393,394,5,47,0,0,394,398,1,0,0,0,395,397,
        8,5,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,
        1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,6,44,0,0,402,90,
        1,0,0,0,22,0,209,214,218,224,245,301,304,310,315,319,331,337,344,
        352,355,360,362,367,374,384,398,1,6,0,0
    ]

class SaveDataLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    INVENTORY_HEADER = 6
    GATES_HEADER = 7
    LEVELS_HEADER = 8
    UNLOCKS_HEADER = 9
    ACHIEVEMENTS_HEADER = 10
    QUANTUM_FUSER = 11
    DURATION_UNIT = 12
    DATE = 13
    TIME = 14
    VALUE = 15
    NAME_STD = 16
    NAME_SYMBOL = 17
    NAME_SPECIAL = 18
    DIRECTION = 19
    TUTORIAL_LITERAL = 20
    TRIGGER_LITERAL = 21
    HEADER = 22
    ENDER = 23
    HORIZONTAL_SEPARATOR = 24
    VERTICAL_SEPARATOR = 25
    LIST_SEPARATOR = 26
    WALL = 27
    EMPTY_HALLWAY = 28
    EMPTY_ROOM = 29
    DIGIT = 30
    INTEGER = 31
    FLOAT = 32
    IMAG_NUMBER = 33
    SIGN = 34
    CHARACTER_LOW = 35
    CHARACTER_UP = 36
    CHARACTER = 37
    TEXT = 38
    ROOM_ID = 39
    HALLWAY_ID = 40
    REFERENCE = 41
    WS = 42
    UNIVERSAL_SEPARATOR = 43
    COMMENT = 44
    LINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'Score'", "'='", "'out'", "'of'", "'[INVENTORY]'", "'[GATES]'", 
            "'[LEVELS]'", "'[UNLOCKS]'", "'[ACHIEVEMENTS]'", "'QuantumFuser'", 
            "'seconds'", "'tutorial'", "'trigger'", "'Qrogue<'", "'>Qrogue'", 
            "'~'", "'|'", "','", "'#'", "'..'", "'__'" ]

    symbolicNames = [ "<INVALID>",
            "INVENTORY_HEADER", "GATES_HEADER", "LEVELS_HEADER", "UNLOCKS_HEADER", 
            "ACHIEVEMENTS_HEADER", "QUANTUM_FUSER", "DURATION_UNIT", "DATE", 
            "TIME", "VALUE", "NAME_STD", "NAME_SYMBOL", "NAME_SPECIAL", 
            "DIRECTION", "TUTORIAL_LITERAL", "TRIGGER_LITERAL", "HEADER", 
            "ENDER", "HORIZONTAL_SEPARATOR", "VERTICAL_SEPARATOR", "LIST_SEPARATOR", 
            "WALL", "EMPTY_HALLWAY", "EMPTY_ROOM", "DIGIT", "INTEGER", "FLOAT", 
            "IMAG_NUMBER", "SIGN", "CHARACTER_LOW", "CHARACTER_UP", "CHARACTER", 
            "TEXT", "ROOM_ID", "HALLWAY_ID", "REFERENCE", "WS", "UNIVERSAL_SEPARATOR", 
            "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "INVENTORY_HEADER", 
                  "GATES_HEADER", "LEVELS_HEADER", "UNLOCKS_HEADER", "ACHIEVEMENTS_HEADER", 
                  "QUANTUM_FUSER", "DURATION_UNIT", "DATE", "TIME", "VALUE", 
                  "NAME_STD", "NAME_SYMBOL", "NAME_SPECIAL", "DIRECTION", 
                  "TUTORIAL_LITERAL", "TRIGGER_LITERAL", "HEADER", "ENDER", 
                  "HORIZONTAL_SEPARATOR", "VERTICAL_SEPARATOR", "LIST_SEPARATOR", 
                  "WALL", "EMPTY_HALLWAY", "EMPTY_ROOM", "DIGIT", "INTEGER", 
                  "FLOAT", "IMAG_NUMBER", "SIGN", "CHARACTER_LOW", "CHARACTER_UP", 
                  "CHARACTER", "TEXT", "ROOM_ID", "HALLWAY_ID", "REFERENCE", 
                  "WS", "UNIVERSAL_SEPARATOR", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "SaveData.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


