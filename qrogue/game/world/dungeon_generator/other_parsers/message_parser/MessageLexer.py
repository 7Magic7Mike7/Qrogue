# Generated from D:/Documents/pycharm_workspace/Qrogue/qrogue/game/world/dungeon_generator/other_parsers\Message.g4 by ANTLR 4.10.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    return [
        4,0,29,263,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,103,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,123,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
        4,14,160,8,14,11,14,12,14,161,1,15,3,15,165,8,15,1,15,1,15,4,15,
        169,8,15,11,15,12,15,170,1,16,5,16,174,8,16,10,16,12,16,177,9,16,
        1,16,3,16,180,8,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,3,20,192,8,20,1,21,1,21,5,21,196,8,21,10,21,12,21,199,9,21,
        1,21,1,21,1,22,1,22,3,22,205,8,22,1,22,1,22,1,23,1,23,1,23,1,23,
        3,23,213,8,23,1,23,3,23,216,8,23,1,24,1,24,1,24,4,24,221,8,24,11,
        24,12,24,222,1,25,4,25,226,8,25,11,25,12,25,227,1,25,1,25,1,26,4,
        26,233,8,26,11,26,12,26,234,1,26,1,26,1,27,1,27,1,27,1,27,5,27,243,
        8,27,10,27,12,27,246,9,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,5,28,257,8,28,10,28,12,28,260,9,28,1,28,1,28,2,197,244,0,29,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,1,0,6,1,0,48,57,2,0,43,43,45,45,1,
        0,97,122,1,0,65,90,3,0,9,10,13,13,32,32,2,0,10,10,13,13,282,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,70,1,0,
        0,0,5,76,1,0,0,0,7,102,1,0,0,0,9,122,1,0,0,0,11,124,1,0,0,0,13,132,
        1,0,0,0,15,140,1,0,0,0,17,142,1,0,0,0,19,144,1,0,0,0,21,146,1,0,
        0,0,23,148,1,0,0,0,25,151,1,0,0,0,27,154,1,0,0,0,29,156,1,0,0,0,
        31,164,1,0,0,0,33,179,1,0,0,0,35,183,1,0,0,0,37,185,1,0,0,0,39,187,
        1,0,0,0,41,191,1,0,0,0,43,193,1,0,0,0,45,204,1,0,0,0,47,215,1,0,
        0,0,49,217,1,0,0,0,51,225,1,0,0,0,53,232,1,0,0,0,55,238,1,0,0,0,
        57,252,1,0,0,0,59,60,5,91,0,0,60,61,5,77,0,0,61,62,5,101,0,0,62,
        63,5,115,0,0,63,64,5,115,0,0,64,65,5,97,0,0,65,66,5,103,0,0,66,67,
        5,101,0,0,67,68,5,115,0,0,68,69,5,93,0,0,69,2,1,0,0,0,70,71,5,101,
        0,0,71,72,5,118,0,0,72,73,5,101,0,0,73,74,5,110,0,0,74,75,5,116,
        0,0,75,4,1,0,0,0,76,77,5,97,0,0,77,78,5,108,0,0,78,79,5,116,0,0,
        79,80,5,101,0,0,80,81,5,114,0,0,81,82,5,110,0,0,82,83,5,97,0,0,83,
        84,5,116,0,0,84,85,5,105,0,0,85,86,5,118,0,0,86,87,5,101,0,0,87,
        6,1,0,0,0,88,89,5,115,0,0,89,90,5,112,0,0,90,91,5,101,0,0,91,92,
        5,97,0,0,92,93,5,107,0,0,93,94,5,101,0,0,94,103,5,114,0,0,95,96,
        5,83,0,0,96,97,5,112,0,0,97,98,5,101,0,0,98,99,5,97,0,0,99,100,5,
        107,0,0,100,101,5,101,0,0,101,103,5,114,0,0,102,88,1,0,0,0,102,95,
        1,0,0,0,103,8,1,0,0,0,104,105,5,78,0,0,105,106,5,111,0,0,106,107,
        5,114,0,0,107,108,5,116,0,0,108,123,5,104,0,0,109,110,5,69,0,0,110,
        111,5,97,0,0,111,112,5,115,0,0,112,123,5,116,0,0,113,114,5,83,0,
        0,114,115,5,111,0,0,115,116,5,117,0,0,116,117,5,116,0,0,117,123,
        5,104,0,0,118,119,5,87,0,0,119,120,5,101,0,0,120,121,5,115,0,0,121,
        123,5,116,0,0,122,104,1,0,0,0,122,109,1,0,0,0,122,113,1,0,0,0,122,
        118,1,0,0,0,123,10,1,0,0,0,124,125,5,81,0,0,125,126,5,114,0,0,126,
        127,5,111,0,0,127,128,5,103,0,0,128,129,5,117,0,0,129,130,5,101,
        0,0,130,131,5,60,0,0,131,12,1,0,0,0,132,133,5,62,0,0,133,134,5,81,
        0,0,134,135,5,114,0,0,135,136,5,111,0,0,136,137,5,103,0,0,137,138,
        5,117,0,0,138,139,5,101,0,0,139,14,1,0,0,0,140,141,5,126,0,0,141,
        16,1,0,0,0,142,143,5,124,0,0,143,18,1,0,0,0,144,145,5,44,0,0,145,
        20,1,0,0,0,146,147,5,35,0,0,147,22,1,0,0,0,148,149,5,46,0,0,149,
        150,5,46,0,0,150,24,1,0,0,0,151,152,5,95,0,0,152,153,5,95,0,0,153,
        26,1,0,0,0,154,155,7,0,0,0,155,28,1,0,0,0,156,157,3,27,13,0,157,
        159,3,27,13,0,158,160,3,27,13,0,159,158,1,0,0,0,160,161,1,0,0,0,
        161,159,1,0,0,0,161,162,1,0,0,0,162,30,1,0,0,0,163,165,3,27,13,0,
        164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,168,5,46,0,0,
        167,169,3,27,13,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,
        0,170,171,1,0,0,0,171,32,1,0,0,0,172,174,3,27,13,0,173,172,1,0,0,
        0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,180,1,0,0,
        0,177,175,1,0,0,0,178,180,3,31,15,0,179,175,1,0,0,0,179,178,1,0,
        0,0,180,181,1,0,0,0,181,182,5,106,0,0,182,34,1,0,0,0,183,184,7,1,
        0,0,184,36,1,0,0,0,185,186,7,2,0,0,186,38,1,0,0,0,187,188,7,3,0,
        0,188,40,1,0,0,0,189,192,3,37,18,0,190,192,3,39,19,0,191,189,1,0,
        0,0,191,190,1,0,0,0,192,42,1,0,0,0,193,197,5,34,0,0,194,196,9,0,
        0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,198,1,0,0,0,197,195,1,0,
        0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,34,0,0,201,44,1,0,
        0,0,202,205,5,95,0,0,203,205,3,41,20,0,204,202,1,0,0,0,204,203,1,
        0,0,0,205,206,1,0,0,0,206,207,3,41,20,0,207,46,1,0,0,0,208,209,5,
        61,0,0,209,216,5,61,0,0,210,213,5,95,0,0,211,213,3,27,13,0,212,210,
        1,0,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,216,3,27,13,0,215,208,
        1,0,0,0,215,212,1,0,0,0,216,48,1,0,0,0,217,220,5,42,0,0,218,221,
        3,41,20,0,219,221,3,27,13,0,220,218,1,0,0,0,220,219,1,0,0,0,221,
        222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,50,1,0,0,0,224,226,
        7,4,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,
        1,0,0,0,228,229,1,0,0,0,229,230,6,25,0,0,230,52,1,0,0,0,231,233,
        5,59,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,
        1,0,0,0,235,236,1,0,0,0,236,237,6,26,0,0,237,54,1,0,0,0,238,239,
        5,47,0,0,239,240,5,42,0,0,240,244,1,0,0,0,241,243,9,0,0,0,242,241,
        1,0,0,0,243,246,1,0,0,0,244,245,1,0,0,0,244,242,1,0,0,0,245,247,
        1,0,0,0,246,244,1,0,0,0,247,248,5,42,0,0,248,249,5,47,0,0,249,250,
        1,0,0,0,250,251,6,27,0,0,251,56,1,0,0,0,252,253,5,47,0,0,253,254,
        5,47,0,0,254,258,1,0,0,0,255,257,8,5,0,0,256,255,1,0,0,0,257,260,
        1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,
        1,0,0,0,261,262,6,28,0,0,262,58,1,0,0,0,19,0,102,122,161,164,170,
        175,179,191,197,204,212,215,220,222,227,234,244,258,1,6,0,0
    ]

class MessageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MESSAGES = 1
    MSG_EVENT = 2
    MSG_ALTERNATIVE = 3
    MSG_SPEAKER = 4
    DIRECTION = 5
    HEADER = 6
    ENDER = 7
    HORIZONTAL_SEPARATOR = 8
    VERTICAL_SEPARATOR = 9
    LIST_SEPARATOR = 10
    WALL = 11
    EMPTY_HALLWAY = 12
    EMPTY_ROOM = 13
    DIGIT = 14
    INTEGER = 15
    FLOAT = 16
    IMAG_NUMBER = 17
    SIGN = 18
    CHARACTER_LOW = 19
    CHARACTER_UP = 20
    CHARACTER = 21
    TEXT = 22
    ROOM_ID = 23
    HALLWAY_ID = 24
    REFERENCE = 25
    WS = 26
    UNIVERSAL_SEPARATOR = 27
    COMMENT = 28
    LINE_COMMENT = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ u"DEFAULT_MODE" ]

    literalNames = [ u"<INVALID>",
            u"'[Messages]'", u"'event'", u"'alternative'", u"'Qrogue<'", 
            u"'>Qrogue'", u"'~'", u"'|'", u"','", u"'#'", u"'..'", u"'__'" ]

    symbolicNames = [ u"<INVALID>",
            u"MESSAGES", u"MSG_EVENT", u"MSG_ALTERNATIVE", u"MSG_SPEAKER", 
            u"DIRECTION", u"HEADER", u"ENDER", u"HORIZONTAL_SEPARATOR", 
            u"VERTICAL_SEPARATOR", u"LIST_SEPARATOR", u"WALL", u"EMPTY_HALLWAY", 
            u"EMPTY_ROOM", u"DIGIT", u"INTEGER", u"FLOAT", u"IMAG_NUMBER", 
            u"SIGN", u"CHARACTER_LOW", u"CHARACTER_UP", u"CHARACTER", u"TEXT", 
            u"ROOM_ID", u"HALLWAY_ID", u"REFERENCE", u"WS", u"UNIVERSAL_SEPARATOR", 
            u"COMMENT", u"LINE_COMMENT" ]

    ruleNames = [ u"MESSAGES", u"MSG_EVENT", u"MSG_ALTERNATIVE", u"MSG_SPEAKER", 
                  u"DIRECTION", u"HEADER", u"ENDER", u"HORIZONTAL_SEPARATOR", 
                  u"VERTICAL_SEPARATOR", u"LIST_SEPARATOR", u"WALL", u"EMPTY_HALLWAY", 
                  u"EMPTY_ROOM", u"DIGIT", u"INTEGER", u"FLOAT", u"IMAG_NUMBER", 
                  u"SIGN", u"CHARACTER_LOW", u"CHARACTER_UP", u"CHARACTER", 
                  u"TEXT", u"ROOM_ID", u"HALLWAY_ID", u"REFERENCE", u"WS", 
                  u"UNIVERSAL_SEPARATOR", u"COMMENT", u"LINE_COMMENT" ]

    grammarFileName = u"Message.g4"

    def __init__(self, input=None, output=sys.stdout):
        super(MessageLexer, self).__init__(input, output=output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


